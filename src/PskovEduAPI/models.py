from typing import List, Optional, Dict, Any


class Subject:
    """
    –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —à–∫–æ–ª—å–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç

    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    :param grades: –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫
    :param avg_grade: –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    :param absences: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    :param skips: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
    :param illnesses: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª–µ–∑–Ω–∏
    :param latenesses: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
    """
    def __init__(self, name, grades, avg_grade, absences, skips, illnesses, latenesses):
        self.name = name
        self.grades = grades
        self.avg_grade = avg_grade
        self.absences = absences
        self.skips = skips
        self.illnesses = illnesses
        self.latenesses = latenesses

    def to_dict(self):
        return {
            "name": self.name,
            "grades": self.grades,
            "avg_grade": self.avg_grade,
            "absences": self.absences,
            "skips": self.skips,
            "illnesses": self.illnesses,
            "latenesses": self.latenesses
        }

    @classmethod
    def from_dict(cls, data):
        return cls(**data)


class GradesReport:
    """
    –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ—Ç—á—ë—Ç –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–∞
    """

    def __init__(self, subjects: List[Subject]):
        self.subjects = subjects

    def to_dict(self):
        return {
            "subjects": [subject.to_dict() for subject in self.subjects]
        }

    @classmethod
    def from_dict(cls, data):
        if not data:
            return cls([])
        subjects = [Subject.from_dict(subject) for subject in data['subjects']]
        return cls(subjects)

    def to_bot_string(self):
        return "<b>ü§ì –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</b>\n\n" + '\n'.join(
            [f"<b>{subject.name}</b>: {", ".join(list(map(str, subject.grades)))}" for subject in self.subjects])


class Student:
    """
    –ö–ª–∞—Å—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—á–µ–Ω–∏–∫–∞

    :param name: –ò–º—è —É—á–µ–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü–µ—Ç—Ä–æ–≤ –ò. –û."
    :param class_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "10–£"
    :param school: –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã
    :param guid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—á–µ–Ω–∏–∫–∞
    """

    def __init__(self, name, class_name, school, guid):
        self.name = name
        self.class_name = class_name
        self.school = school
        self.guid = guid

    def to_dict(self):
        return {
            "name": self.name,
            "class_name": self.class_name,
            "school": self.school,
            "guid": self.guid
        }

    def to_bot_string(self):
        return f"""
<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ</b>

‚Ä¢ –§–ò–û: <code>{self.name}</code>
‚Ä¢ –®–∫–æ–ª–∞: <code>{self.school}</code>
‚Ä¢ –ö–ª–∞—Å—Å: <code>{self.class_name}</code>"""

    @classmethod
    def from_dict(cls, data):
        return cls(
            data['name'],
            data['class_name'],
            data['school'],
            data['guid']
        )


class Homework:
    def __init__(self, date: str, homework: str, items: list):
        self.date = date
        self.homework = homework
        self.items = items

    def to_dict(self):
        return {
            "date": self.date,
            "homework": self.homework,
            "homeworkItems": self.items
        }

    @classmethod
    def from_dict(cls, data):
        return cls(
            data.get("date"),
            data.get('homework'),
            data.get('homeworkItems', [])
        )


class Lesson:
    """
    –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Ä–æ–∫.

    :param participantGuid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—á–µ–Ω–∏–∫–∞ (str)
    :param scheduleItemGuid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞ (str)
    :param journalGuid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∂—É—Ä–Ω–∞–ª–∞ —É—Ä–æ–∫–∞ (str)
    :param lessonTimeGuid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–∫–∞ (str)
    :param subjectGuid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ (str)
    :param subject: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (str)
    :param teacherGuid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—á–∏—Ç–µ–ª—è (str)
    :param teacher: –§–ò–û —É—á–∏—Ç–µ–ª—è (str)
    :param date: –î–∞—Ç–∞ —É—Ä–æ–∫–∞ (str)
    :param lesson_number: –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ (str)
    :param lessonTime: –í—Ä–µ–º—è —É—Ä–æ–∫–∞ (str)
    :param homework: –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (str)
    :param previous_homework: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (dict)
    :param topic: –¢–µ–º–∞ —É—Ä–æ–∫–∞ (str)
    """

    def __init__(self, participantGuid: str, scheduleItemGuid: str, journalGuid: str,
                 lessonTimeGuid: str, subjectGuid: str, subject: str, teacherGuid: str,
                 teacher: str, date: str, lessonNumber: str, lessonTime: str,
                 homework: Optional[str], previousHomework: Optional[Homework], topic: Optional[str],
                 cabinetGuid: Optional[str], cabinet: Optional[str], gradeTypeGuid: Optional[str],
                 gradeType: Optional[str], marks: Optional[list], marksRaw: Optional[list],
                 lessonTimeBegin: Optional[str], lessonTimeEnd: Optional[str], homeworkItems: Optional[list],
                 absence: Optional[list], absenceRaw: Optional[list], notes: Optional[list],
                 periodMark: Optional[bool], weight: Optional[int], gradeHeadComment: Optional[str],
                 markGradeTypes: Optional[list], markCriteria: Optional[list], lateTime: Optional[str],
                 workNames: Optional[list], externalResources: Optional[list], **kwargs):
        self.participantGuid = participantGuid
        self.scheduleItemGuid = scheduleItemGuid
        self.journalGuid = journalGuid
        self.lessonTimeGuid = lessonTimeGuid
        self.subjectGuid = subjectGuid
        self.subject = subject
        self.teacherGuid = teacherGuid
        self.teacher = teacher
        self.date = date
        self.lessonNumber = lessonNumber
        self.lessonTime = lessonTime
        self.homework = homework
        self.previousHomework = previousHomework
        self.topic = topic
        self.cabinetGuid = cabinetGuid
        self.cabinet = cabinet
        self.gradeTypeGuid = gradeTypeGuid
        self.gradeType = gradeType
        self.marks = marks
        self.marksRaw = marksRaw
        self.lessonTimeBegin = lessonTimeBegin
        self.lessonTimeEnd = lessonTimeEnd
        self.homeworkItems = homeworkItems
        self.absence = absence
        self.absenceRaw = absenceRaw
        self.notes = notes
        self.periodMark = periodMark
        self.weight = weight
        self.gradeHeadComment = gradeHeadComment
        self.markGradeTypes = markGradeTypes
        self.markCriteria = markCriteria
        self.lateTime = lateTime
        self.workNames = workNames
        self.externalResources = externalResources

        for key, value in kwargs.items():
            setattr(self, key, value)

    @classmethod
    def from_dict(cls, data):
        homework = Homework.from_dict(data.pop('previousHomework', {}))
        return cls(
            participantGuid=data.get('participantGuid'),
            scheduleItemGuid=data.get('scheduleItemGuid'),
            journalGuid=data.get('journalGuid'),
            lessonTimeGuid=data.get('lessonTimeGuid'),
            subjectGuid=data.get('subjectGuid'),
            subject=data.get('subject'),
            teacherGuid=data.get('teacherGuid'),
            teacher=data.get('teacher'),
            date=data.get('date'),
            lessonNumber=data.get('lessonNumber'),
            lessonTime=data.get('lessonTime'),
            homework=data.get('homework'),
            previousHomework=homework,
            topic=data.get('topic'),
            cabinetGuid=data.get('cabinetGuid'),
            cabinet=data.get('cabinet'),
            gradeTypeGuid=data.get('gradeTypeGuid'),
            gradeType=data.get('gradeType'),
            marks=data.get('marks', []),
            marksRaw=data.get('marksRaw', []),
            lessonTimeBegin=data.get('lessonTimeBegin'),
            lessonTimeEnd=data.get('lessonTimeEnd'),
            homeworkItems=data.get('homeworkItems', []),
            absence=data.get('absence', []),
            absenceRaw=data.get('absenceRaw', []),
            notes=data.get('notes', []),
            periodMark=data.get('periodMark'),
            weight=data.get('weight'),
            gradeHeadComment=data.get('gradeHeadComment'),
            markGradeTypes=data.get('markGradeTypes', []),
            markCriteria=data.get('markCriteria', []),
            lateTime=data.get('lateTime'),
            workNames=data.get('workNames', []),
            externalResources=data.get('externalResources', [])
        )

    def to_dict(self):
        return {
            "previousHomework": hm.to_dict() if (hm := self.__dict__.pop('previousHomework')) else None,
            **{k: v for k, v in self.__dict__.items() if not k.startswith('_')}
        }


class Trimester:
    """
    –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Ç—Ä–∏–º–µ—Å—Ç—Ä

    :param schoolEduPeriodGuid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—á–µ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —à–∫–æ–ª–µ (str)
    :param eduPeriodGuid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—á–µ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (str)
    :param parentEduPeriodGuid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (str)
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (str)
    :param dateBegin: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É—á–µ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (str)
    :param dateEnd: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (str)
    """

    def __init__(self, schoolEduPeriodGuid, eduPeriodGuid, parentEduPeriodGuid, name, dateBegin, dateEnd):
        self.school_edu_periodGuid = schoolEduPeriodGuid
        self.edu_periodGuid = eduPeriodGuid
        self.parent_edu_periodGuid = parentEduPeriodGuid
        self.name = name
        self.date_begin = dateBegin
        self.date_end = dateEnd

    @classmethod
    def from_dict(cls, data):
        return cls(**data)

    def to_dict(self):
        return {
            "schoolEduPeriodGuid": self.school_edu_periodGuid,
            "eduPeriodGuid": self.edu_periodGuid,
            "parentEduPeriodGuid": self.parent_edu_periodGuid,
            "name": self.name,
            "dateBegin": self.date_begin,
            "dateEnd": self.date_end
        }


class Diary:
    """
    –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –¥–Ω–µ–≤–Ω–∏–∫ —É—á–µ–Ω–∏–∫–∞

    :param date: –î–∞—Ç–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ (str)
    :param days: –°–ª–æ–≤–∞—Ä—å —É—Ä–æ–∫–æ–≤ –ø–æ –¥–Ω—è–º (dict)
    :param edu_periods: –°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (List[Trimester])
    """

    def __init__(self, date: str, days: Dict[str, List[Lesson]], edu_periods: List[Trimester]):
        self.date = date
        self.days = days
        self.edu_periods = edu_periods

    @classmethod
    def from_dict(cls, data):
        date = data.pop("date", None)
        lessons = {k: [Lesson.from_dict(r) for r in v] for k, v in data['diary'].items()} if data['diary'] else {}
        edu_periods = [Trimester(**v) for v in data['edu_periods']]
        return cls(date, lessons, edu_periods)

    def to_dict(self, no_periods=False):
        d = {
            "date": self.date,
        }
        for k, v in self.days.items():
            d[k] = [l.to_dict() for l in v]
        if not no_periods:
            d['edu_periods'] = [p.to_dict() for p in self.edu_periods]
        return d





class Event:
    """
    –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–æ–±—ã—Ç–∏–µ

    :param sys_guid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
    :param sys_guidfk: –í–Ω–µ—à–Ω–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
    :param sys_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    :param sys_fldorder: –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª—è
    :param sys_rev: –†–µ–≤–∏–∑–∏—è —Å–æ–±—ã—Ç–∏—è
    :param sys_parentguid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    :param sys_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–±—ã—Ç–∏–µ–º
    :param sys_creator: –°–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è
    :param sys_created: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    :param sys_updated: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ html-–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    :param type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
    :param time_begin: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è
    :param time_end: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    :param duration: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
    """

    def __init__(self, sys_guid: str, sys_guidfk: Optional[str], sys_state: str, sys_fldorder: Optional[str],
                 sys_rev: str,
                 sys_parentguid: Optional[str], sys_user: str, sys_creator: str, sys_created: str, sys_updated: str,
                 title: str,
                 message: str, type: str, time_begin: str, time_end: str, duration: str):
        self.sys_guid = sys_guid
        self.sys_guidfk = sys_guidfk
        self.sys_state = sys_state
        self.sys_fldorder = sys_fldorder
        self.sys_rev = sys_rev
        self.sys_parentguid = sys_parentguid
        self.sys_user = sys_user
        self.sys_creator = sys_creator
        self.sys_created = sys_created
        self.sys_updated = sys_updated
        self.title = title
        self.message = message
        self.type = type
        self.time_begin = time_begin
        self.time_end = time_end
        self.duration = duration

    @classmethod
    def from_dict(cls, data: dict):
        return cls(**data)

    def to_dict(self):
        return {
            **{k: v for k, v in self.__dict__.items() if not k.startswith('_')}
        }
